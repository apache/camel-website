import BaseCommand from '../../commands/base-command.js';
import { $TSFixMe } from '../../commands/types.js';
declare const hashFns: (command: BaseCommand, directories: string[], config: {
    /** @default 'function' */
    assetType?: string;
    concurrentHash?: number;
    functionsConfig: $TSFixMe;
    /** @default 'sha256' */
    hashAlgorithm?: string;
    manifestPath: $TSFixMe;
    rootDir: $TSFixMe;
    skipFunctionsCache: $TSFixMe;
    statusCb: $TSFixMe;
    tmpDir: $TSFixMe;
}) => Promise<{
    functions: {};
    functionsWithNativeModules: never[];
    shaMap: {};
    functionSchedules?: undefined;
    fnShaMap?: undefined;
    fnConfig?: undefined;
} | {
    functionSchedules: ("" | {
        name: string;
        cron: string;
    } | undefined)[];
    functions: {};
    functionsWithNativeModules: (Omit<import("@netlify/zip-it-and-ship-it/dist/function.js").FunctionArchive, "runtime"> & {
        routes?: import("@netlify/zip-it-and-ship-it/dist/utils/routes.js").Route[] | undefined;
        runtime: import("@netlify/zip-it-and-ship-it").RuntimeName;
        schedule?: string | undefined;
        runtimeAPIVersion?: number | undefined;
    } & {
        buildData?: unknown;
    })[];
    fnShaMap: {};
    fnConfig: {};
    shaMap?: undefined;
}>;
export default hashFns;
//# sourceMappingURL=hash-fns.d.ts.map